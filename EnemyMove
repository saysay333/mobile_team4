using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class EnemyMove : MonoBehaviour
{
    public List<Transform> locations;
    public Transform patrolRoute;
    public Transform player;

    private int locationIndex = 0;
    private UnityEngine.AI.NavMeshAgent agent;

    public GameBehavior gameManager;

    private AudioSource audioEnemy;

    private int _lives = 3;
    public int EnemyLives
    {
        get { return _lives; }
        set
        {
            _lives = value;
            if (_lives <= 0)
            {
                Destroy(this.gameObject);
                Debug.Log("Enemy is killed.");

                gameManager.Score = gameManager.Score + 1;
            }
        }
    }

    // Start is called before the first frame update
    void Start()
    {
        agent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        player = GameObject.Find("Dog").transform;
        patrolRoute = GameObject.Find("PatrolRoute").transform;
        InitialzePatrolRoute();
        MoveToNextPatrolPoint();

        gameManager = GameObject.Find("GameManagement").GetComponent<GameBehavior>();

    }

    // Update is called once per frame
    void Update()
    {
        if (agent.remainingDistance < 0.5f && !agent.pathPending)
        {
            MoveToNextPatrolPoint();
        }
    }

    private void OnTriggerEnter(Collider collider)
    {
        if(collider.name == "Dog")
        {
            agent.destination = player.position;

            Debug.Log("Player detected - Attack!!");
        }
    }

    void OnCollisionEnter(Collision collision)
    {

        if (collision.gameObject.name == "Bullet(Clone)")
        {
            EnemyLives -= 1;
            Debug.Log("Enemy Hit!");
        }

        
        if (collision.gameObject.name == "Dog")
        {
            Destroy(gameObject);
        }
        

    }

    private void OnTriggerExit(Collider collider)
    {
        if(collider.name == "Dog")
        {
            Debug.Log("Player out of range, resume patrol");
        }
    }

    void InitialzePatrolRoute()
    {
        foreach (Transform child in patrolRoute)
        {
            locations.Add(child);
        }
    }

    void MoveToNextPatrolPoint()
    {
        agent.destination = locations[locationIndex].position;

        // locations.Count : locations List의 원소 개수 (4)
        locationIndex = (locationIndex + 1) % locations.Count;

    }
}
