using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FeedGunController : MonoBehaviour
{

    public Rigidbody prefabBullet;
    public Transform bulletTransform;

    [SerializeField]
    private FeedGun currentFeedGun;

    private float currentFireRate;

    private bool isReload = false;
    [HideInInspector]

    private AudioSource audioSource;

    private RaycastHit hitInfo;

    [SerializeField]
    private Camera theCam;

    [SerializeField]
    private GameObject hit_effect_prefab;


    // Start is called before the first frame update
    void Start()
    {
        audioSource = GetComponent<AudioSource>();
    }

    // Update is called once per frame
    void Update()
    {
        FeedGunFireRateCalc();
        TryFire();
        TryReload();
    }

    private void FeedGunFireRateCalc()
    {
        if (currentFireRate > 0)
            currentFireRate -= Time.deltaTime;
    }

    private void TryFire()
    {
        if (Input.GetButton("Fire1") && currentFireRate <= 0 && !isReload)
        {
            Fire();
        }
    }

    private void Fire() //발사 전
    {
        if (!isReload)
        {
            if (currentFeedGun.currentBulletCount > 0)
                Shoot();
            else
                StartCoroutine(ReloadCoroutine());
        }

    }

    private void Shoot() //발사 후
    {

        Rigidbody bulletInstance =
            Instantiate(prefabBullet, bulletTransform.position, bulletTransform.rotation) as Rigidbody;

        bulletInstance.velocity = 25.0f * bulletTransform.forward;

        currentFeedGun.currentBulletCount--;

        currentFireRate = currentFeedGun.fireRate; //연사속도 재계산
        PlaySE(currentFeedGun.feed_Sound);
        currentFeedGun.muzzleFlash.Play();
        Hit();
        //Debug.Log("Shoot");

    }

    private void Hit()
    {
        if (Physics.Raycast(theCam.transform.position, theCam.transform.forward, out hitInfo, currentFeedGun.range))
        {
            Debug.Log(hitInfo.transform.name);
            GameObject clone = Instantiate(hit_effect_prefab, hitInfo.point , Quaternion.LookRotation(hitInfo.normal));
            Destroy(clone, 2.0f);
        }
    }

    private void TryReload()
    {
        if(Input.GetKeyDown(KeyCode.R) && !isReload && currentFeedGun.currentBulletCount < currentFeedGun.reloadBulletCount)
        {
            StartCoroutine(ReloadCoroutine());
        }
    }

    IEnumerator ReloadCoroutine()
    {       
        if(currentFeedGun.carryBulletCount > 0)
        {
            isReload = true;

            currentFeedGun.carryBulletCount += currentFeedGun.currentBulletCount;
            currentFeedGun.currentBulletCount = 0;

            yield return new WaitForSeconds(currentFeedGun.reloadTime);

            if (currentFeedGun.carryBulletCount >= currentFeedGun.reloadBulletCount)
            {
                currentFeedGun.currentBulletCount = currentFeedGun.reloadBulletCount;
                currentFeedGun.carryBulletCount -= currentFeedGun.reloadBulletCount;
            }
            else
            {
                currentFeedGun.currentBulletCount = currentFeedGun.carryBulletCount;
                currentFeedGun.carryBulletCount = 0;
            }

            isReload = false;
        }

        else
        {
            Debug.Log("you don't have bullet");
        }
    }

    private void PlaySE(AudioClip _clip)
    {
        audioSource.clip = _clip;
        audioSource.Play();
    }

    public FeedGun GetFeedGun()
    {
        return currentFeedGun;
    } 

}
